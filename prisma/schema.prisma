// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  uuid      String    @id @default(uuid()) @db.Uuid
  isDefault Boolean   @default(false)
  name      String    @unique @db.VarChar(100)
  users     User[]
}

model User {
  uuid      String    @id @default(uuid()) @db.Uuid
  email     String    @unique @db.VarChar(255)
  deleted   Boolean   @default(false)
  imageUrl  String?   @db.VarChar(255)
  roleId    String?   @db.Uuid
  
  role      Role?     @relation(fields: [roleId], references: [uuid])
  accounts  Account[]
  mentors   Mentor[]
  threads   Thread[]
}

model Account {
  uuid      String    @id @default(uuid()) @db.Uuid
  name      String    @db.VarChar(255)
  deleted   Boolean   @default(false)
  ownerId   String?   @db.Uuid

  owner     User?     @relation(fields: [ownerId], references: [uuid])
  channels  Channel[]
  mentors   Mentor[]
}

model Mentor {
  uuid       String   @id @default(uuid()) @db.Uuid
  userId     String   @db.Uuid
  isActive   Boolean  @default(true)
  name       String   @db.VarChar(255)
  expertise  String?
  accountId  String?  @db.Uuid

  user       User     @relation(fields: [userId], references: [uuid])
  account    Account? @relation(fields: [accountId], references: [uuid])
  threads    Thread[]
}

model Channel {
  uuid      String    @id @default(uuid()) @db.Uuid
  accountId String?   @db.Uuid
  name      String    @db.VarChar(255)
  isDeleted Boolean   @default(false)

  account   Account?  @relation(fields: [accountId], references: [uuid])
  threads   Thread[]
}

model Thread {
  uuid       String   @id @default(uuid()) @db.Uuid
  channelId  String?  @db.Uuid
  title      String   @db.VarChar(255)
  isDeleted  Boolean  @default(false)
  mentorId   String?  @db.Uuid
  menteeId   String?  @db.Uuid

  channel    Channel? @relation(fields: [channelId], references: [uuid])
  mentor     Mentor?  @relation(fields: [mentorId], references: [uuid], onDelete: SetNull)
  mentee     User?    @relation(fields: [menteeId], references: [uuid], onDelete: SetNull)

  messages   Message[]
}

model Message {
  uuid        String   @id @default(uuid()) @db.Uuid
  threadId    String   @db.Uuid
  fromAddress String   @db.VarChar(255)
  toAddress   String   @db.VarChar(255)
  body        String
  isDeleted   Boolean  @default(false)

  thread      Thread   @relation(fields: [threadId], references: [uuid])
}
