// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleType {
  OWNER
  ADMIN
  USER
  MENTOR
}

model Account {
  id     String  @id @default(uuid())
  name   String
  domain String?

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  Role        Role[]
  AccountUser AccountUser[]
  Channel     Channel[]
  Mentor      Mentor[]
}

enum GenderType {
  MALE
  FEMALE
}

model User {
  id       String  @id @default(uuid())
  name     String
  email    String  @unique
  password String
  imageUrl String?

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  AccountUser AccountUser[]
}

model AccountUser {
  id        String @id @default(uuid())
  userId    String
  roleId    String
  accountId String

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  Account Account @relation(fields: [accountId], references: [id])
  User    User    @relation(fields: [userId], references: [id])
  Role    Role    @relation(fields: [roleId], references: [id])
}

model Mentor {
  id           String     @id @default(uuid())
  accountId    String
  name         String
  email        String
  expertise    String?
  availability Json?
  age          Int?
  gender       GenderType @default(MALE)
  location     String?
  isActive     Boolean    @default(true)

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  Conversation Conversation[]
  Account      Account        @relation(fields: [accountId], references: [id])
}

model Conversation {
  id        String  @id @default(uuid())
  mentorId  String
  address   String
  channelId String
  isActive  Boolean

  Mentor  Mentor   @relation(fields: [mentorId], references: [id])
  Channel Channel  @relation(fields: [channelId], references: [id])
  Threads Thread[]
}

model Role {
  id        String   @id @default(uuid())
  name      String
  isDefault Boolean  @default(false)
  type      RoleType
  accountId String?

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  Account     Account?      @relation(fields: [accountId], references: [id])
  AccountUser AccountUser[]
}

model Thread {
  id             String @id @default(uuid())
  conversationId String
  messageId      String

  Conversation Conversation @relation(fields: [conversationId], references: [id])
  Message      Message      @relation(fields: [messageId], references: [id])
}

enum ChannelType {
  NEGARIT
  TELEGRAM
  WHATSAPP
  TWILIO
}

model Channel {
  id            String      @id @default(uuid())
  accountId     String
  name          String
  type          ChannelType @default(NEGARIT)
  configuration Json?

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  Account       Account        @relation(fields: [accountId], references: [id])
  Conversations Conversation[]
  Messages      Message[]
}

enum MessageType {
  SENT
  RECEIVED
}

model Message {
  id        String      @id @default(uuid())
  channelId String
  address   String
  type      MessageType
  body      String

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  Channel Channel  @relation(fields: [channelId], references: [id])
  Threads Thread[]
}
