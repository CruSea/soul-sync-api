generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleType {
  ADMIN
  MENTOR
  MENTEE
}

model Account {
  id              String       @id @default(uuid())
  name            String
  createdAt       String
  isDeleted       Boolean      @default(false)
  
  roles           Role[]
  users           AccountUser[]
  channels        Channel[]
}

model Role {
  id              String        @id @default(uuid())
  name            String
  isDefault       Boolean
  type            RoleType
  accountId       String

  account         Account       @relation(fields: [accountId], references: [id])
  AccountUser     AccountUser[]
}

model User {
  id              String        @id @default(uuid())
  name            String
  userName        String
  password        String
  imageUrl        String
  createdAt       String
  isDeleted       Boolean       @default(false)

  accountUsers    AccountUser[]
  mentor          Mentor?
  mentee          Mentee?
}

model AccountUser {
  id               String         @id @default(uuid())
  userId           String
  isDeleted        Boolean        @default(false)
  roleId           String
  accountId        String
  createdAt        String

  account          Account        @relation(fields: [accountId], references: [id])
  role             Role           @relation(fields: [roleId], references: [id])
  user             User           @relation(fields: [userId], references: [id])
}

model Channel {
  id                String        @id @default(uuid())
  accountId         String
  name              String
  configuration     Json
  isDeleted         Boolean       @default(false)
  createdAt         String

  account           Account        @relation(fields: [accountId], references: [id])
  mentees           Mentee[]
  conversations     Conversation[]
  messages          Message[]
}

model Mentor {
  id                String         @id @default(uuid())
  userId            String         @unique
  specialization    String
  whenAvailable     Json
  age               String
  gender            String
  location          String
  status            Boolean
  phone             String
  createdAt         String
  isDeleted         Boolean         @default(false)

  user              User            @relation(fields: [userId], references: [id])
  conversations     Conversation[]
}

model Mentee {
  id                String          @id @default(uuid())
  userId            String          @unique
  channelId         String
  metaData          Json
  createdAt         String
  isDeleted         Boolean         @default(false)

  user              User            @relation(fields: [userId], references: [id])
  channel           Channel         @relation(fields: [channelId], references: [id])
  conversations     Conversation[]  @relation("MenteeConversation")
}

model Conversation {
  id                String          @id @default(uuid())
  mentorId          String
  menteeId          String
  address           String
  channelId         String
  status            Boolean
  createdAt         String
  endedAt           String

  threads           Thread[]
  mentor            Mentor          @relation(fields: [mentorId], references: [id])
  channel           Channel         @relation(fields: [channelId], references: [id])
  mentee            Mentee          @relation("MenteeConversation", fields: [menteeId], references: [id])
}

model Message {
  id                String          @id @default(uuid())
  channelId         String
  type              String
  content           String
  isDeleted         Boolean         @default(false)
  createdAt         String

  thread            Thread?
  channel           Channel         @relation(fields: [channelId], references: [id])
}

model Thread {
  id                String          @id @default(uuid())
  conversationId    String  
  messageId         String          @unique

  conversation      Conversation    @relation(fields: [conversationId], references: [id])
  message           Message         @relation(fields: [messageId], references: [id])
}